# [MANAGER]: Manager Deployment Configurations
controllerManager:
  replicas: 1
  container:
    image:
      repository: ghcr.io/upbothq/upbot-operator
      tag: ""
    args:
      - "--leader-elect"
      - "--metrics-bind-address=:8443"
      - "--health-probe-bind-address=:8081"
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 20
      httpGet:
        path: /healthz
        port: 8081
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      httpGet:
        path: /readyz
        port: 8081
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - "ALL"
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  terminationGracePeriodSeconds: 10
  serviceAccountName: upbot-operator-controller-manager

# [RBAC]: To enable RBAC (Permissions) configurations
rbac:
  enable: true

# [CRDs]: To enable the CRDs
crd:
  # This option determines whether the CRDs are included
  # in the installation process.
  enable: true

  # Enabling this option adds the "helm.sh/resource-policy": keep
  # annotation to the CRD, ensuring it remains installed even when
  # the Helm release is uninstalled.
  # NOTE: Removing the CRDs will also remove all cert-manager CR(s)
  # (Certificates, Issuers, ...) due to garbage collection.
  keep: true

# [METRICS]: Set to true to generate manifests for exporting metrics.
# To disable metrics export set false, and ensure that the
# ControllerManager argument "--metrics-bind-address=:8443" is removed.
metrics:
  enable: true

# [PROMETHEUS]: To enable a ServiceMonitor to export metrics to Prometheus set true
prometheus:
  enable: false

# [CERT-MANAGER]: To enable cert-manager injection to webhooks set true
certmanager:
  enable: false

# [NETWORK POLICIES]: To enable NetworkPolicies set true
networkPolicy:
  enable: false


# [UPBOT]: Configuration for Upbot API integration
upbot:
  # Name of existing secret containing the Upbot API key
  # The secret should have a key named 'token' containing the API key
  # Example: kubectl create secret generic upbot-api-key --from-literal=token=your-api-key
  apiKeyExistingSecret: "upbot-api-key"
  
  # Alternative: directly specify the API key (not recommended for production)
  # This will create a secret automatically
  # apiKey: "your-api-key-here"

  # [INGRESS WATCHER]: Configuration for automatic Monitor creation from Ingress resources
  ingressWatcher:
    # Set to true to enable automatic Monitor creation for Ingress resources
    # When enabled, the operator will automatically create Monitor resources for
    # every Ingress resource in the cluster. The monitor will use:
    # - type: "http"
    # - target: extracted from the first Ingress rule (https://host or http://host)
    # - interval: "30" (30 seconds)
    enable: false
    interval: "60"

# [CLEANUP]: Configuration for cleanup when uninstalling the chart
cleanup:
  # Enable cleanup job that runs before chart deletion
  # This will delete all Monitor resources from both Kubernetes and Upbot API
  enabled: true
  
  # Cleanup job image configuration
  image:
    repository: alpine/k8s
    tag: "1.28.13"
    pullPolicy: IfNotPresent
  
  # Timeout for the cleanup job (in seconds)
  timeout: "300"
  
  # Dry run mode - if true, will only log what would be deleted without actually deleting
  dryRun: false
  
  # Resource limits for the cleanup job
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  
  # Node selector for cleanup job
  nodeSelector: {}
  
  # Tolerations for cleanup job
  tolerations: []
  
  # Affinity for cleanup job  
  affinity: {}
